description='Spring Recipes 4th Edition - Sources'

apply plugin: 'base'
apply plugin: 'project-report'
apply plugin: 'idea'
apply plugin: 'eclipse'

allprojects {
    group = 'com.apress.springrecipes'
    version = '4.0.0-SNAPSHOT'

    // Define repositorie to get dependencies
    repositories {
        mavenCentral()
        // Public Spring artifacts
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/libs-release"}
        maven { url "http://repo.spring.io/milestone" }
    }
}

subprojects { subproject ->

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    ext {
        springVersion               = '5.0.0.M4'
        springAmqpVersion           = '1.7.0.RELEASE'
        springBatchVersion          = '4.0.0.M1'
        springCFVersion             = '1.1.0.RELEASE'
        springDataGemfireVersion    = '1.5.1.RELEASE'
        springDataJpaVersion        = '1.11.0.RELEASE'
        springDataMongodbVersion    = '1.10.0.RELEASE'
        springDataNeo4jVersion      = '4.2.0.RELEASE'
        springDataRedisVersion      = '1.8.0.RELEASE'
        springHadoopVersion         = '2.0.4.RELEASE'
        springIntegrationVersion    = '5.0.0.M2'
        springKafkaVersion          = '1.1.2.RELEASE'
        springLdapVersion           = '2.3.1.RELEASE'
        springMobileVersion         = '2.0.0.M1'
        springSecurityVersion       = '4.2.1.RELEASE'
        springSocialVersion         = '1.1.4.RELEASE'
        springSocialFacebookVersion = '2.0.3.RELEASE'
        springSocialTwitterVersion  = '1.1.2.RELEASE'
        springWebFlowVersion        = '2.4.4.RELEASE'
        springWsVersion             = '2.4.2.RELEASE'

        activemqVersion             = '5.14.3'
        apacheCxfVersion            = '2.7.5'
        aspectjVersion              = '1.9.0.BETA-5'
        assertjVersion              = '3.6.2'
        castorVersion               = '1.3.3'
        commonsLangVersion          = '2.6'
        ehCacheVersion              = '2.10.3'
        gemfireVersion              = '8.0.0'
        groovyVersion               = '2.4.7'
        hadoopVersion               = '2.5.1'
        hessianVersion              = '4.0.38'
        hibernate4Version           = '5.2.6.Final'
        hibValVersion               = '5.4.0.Beta1'
        hsqldbVersion               = '2.3.2'
        itextVersion                = '4.2.1'
        jackson2Version             = '2.8.6'
        javaMailVersion             = '1.5.6'
        jedisVersion                = '2.6.0'
        jodaVersion                 = '2.9.7'
        junitVersion                = '4.12'
        kafkaVersion                = '0.10.1.1'
        logbackVersion              = '1.1.9'
        mockitoVersion              = '2.6.8'
        neo4jVersion                = '2.1.5'
        poiVersion                  = '3.15'
        postgresVersion             = '9.4.1212'
        quartzVersion               = '2.2.3'
        romeVersion                 = '1.0'
        servletApiVersion           = '3.1.0'
        slf4jVersion                = '1.7.22'
        testngVersion               = '6.10'
        wsdl4jVersion               = '1.6.3'
    }


	compileJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
		"-Xlint:unchecked", "-Xlint:-options"
	]

	compileTestJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
		"-Xlint:-unchecked", "-Xlint:-options"]

	compileJava {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}

	compileTestJava {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}

    eclipse {
        project {
            natures += 'org.springframework.ide.eclipse.core.springnature'
        }
    }

	configurations {
		// We want to use SLF4J for logging, ban commons-logging
		all*.exclude group: 'commons-logging', module: 'commons-logging'
	
		provided
	}
  
	dependencies {
		compile("org.slf4j:slf4j-api:${slf4jVersion}")
		compile("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
		compile("ch.qos.logback:logback-classic:${logbackVersion}")

    	// Add dependencies for testing (these will only be used for the testing phase)
		testCompile("junit:junit:${junitVersion}")
		testCompile("org.mockito:mockito-core:$mockitoVersion")
        testCompile("org.assertj:assertj-core:$assertjVersion")
		testCompile("org.springframework:spring-test:$springVersion")
	}
	
	//Include provided for compilation
	sourceSets.main.compileClasspath += configurations.provided
	
	task copyDependenciesToLibDir( type: Copy ) {
		into "$buildDir/libs/lib"
		from configurations.runtime
	}

    jar {
        // Copy jar dependencies and add to Class-Path.
        dependsOn copyDependenciesToLibDir
        def deps = fileTree(dir: "$buildDir/libs/lib", include: '*.jar');
        manifest.attributes("Class-Path": deps.files.collect {'lib/'+it.name}.join(' '))
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}